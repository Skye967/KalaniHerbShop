[{"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/index.js":"1","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/store.js":"2","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reportWebVitals.js":"3","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/App.js":"4","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/productReducers.js":"5","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Header.js":"6","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/orderReducers.js":"7","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/HomeScreen.js":"8","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Footer.js":"9","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/userReducers.js":"10","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/cartReducers.js":"11","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/OrderScreen.js":"12","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductScreen.js":"13","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/LoginScreen.js":"14","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProfileScreen.js":"15","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/RegisterScreen.js":"16","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/CartScreen.js":"17","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/PaymentScreen.js":"18","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/PlaceOrderScreen.js":"19","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/UserEditScreen.js":"20","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ShippingScreen.js":"21","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductEditScreen.js":"22","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/UserListScreen.js":"23","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductListScreen.js":"24","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/OrderListScreen.js":"25","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/SearchBox.js":"26","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/ProductCarousel.js":"27","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Product.js":"28","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/productConstants.js":"29","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/orderConstants.js":"30","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Loader.js":"31","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/products.js":"32","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Message.js":"33","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Paginate.js":"34","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/userConstants.js":"35","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/cartConstants.js":"36","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Rating.js":"37","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/orderActions.js":"38","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/FormContainer.js":"39","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/cartActions.js":"40","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/CheckoutSteps.js":"41","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/productActions.js":"42","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/userActions.js":"43"},{"size":631,"mtime":1652764828480,"results":"44","hashOfConfig":"45"},{"size":2441,"mtime":1653971803617,"results":"46","hashOfConfig":"45"},{"size":362,"mtime":1652559655857,"results":"47","hashOfConfig":"45"},{"size":2609,"mtime":1653985195369,"results":"48","hashOfConfig":"45"},{"size":4097,"mtime":1653971723935,"results":"49","hashOfConfig":"45"},{"size":2296,"mtime":1653985156654,"results":"50","hashOfConfig":"45"},{"size":4012,"mtime":1653451576094,"results":"51","hashOfConfig":"45"},{"size":1560,"mtime":1653972803584,"results":"52","hashOfConfig":"45"},{"size":321,"mtime":1652564038673,"results":"53","hashOfConfig":"45"},{"size":4423,"mtime":1653382620540,"results":"54","hashOfConfig":"45"},{"size":1544,"mtime":1653279149557,"results":"55","hashOfConfig":"45"},{"size":8762,"mtime":1653452539428,"results":"56","hashOfConfig":"45"},{"size":10729,"mtime":1653464094194,"results":"57","hashOfConfig":"45"},{"size":2623,"mtime":1653098320421,"results":"58","hashOfConfig":"45"},{"size":5968,"mtime":1653382419426,"results":"59","hashOfConfig":"45"},{"size":3636,"mtime":1653168611785,"results":"60","hashOfConfig":"45"},{"size":4319,"mtime":1653367701456,"results":"61","hashOfConfig":"45"},{"size":1750,"mtime":1653184619113,"results":"62","hashOfConfig":"45"},{"size":6440,"mtime":1653334163465,"results":"63","hashOfConfig":"45"},{"size":3376,"mtime":1653430281487,"results":"64","hashOfConfig":"45"},{"size":3061,"mtime":1654221387934,"results":"65","hashOfConfig":"45"},{"size":6481,"mtime":1653448802902,"results":"66","hashOfConfig":"45"},{"size":3237,"mtime":1653413507486,"results":"67","hashOfConfig":"45"},{"size":4727,"mtime":1653965944534,"results":"68","hashOfConfig":"45"},{"size":3132,"mtime":1653451162763,"results":"69","hashOfConfig":"45"},{"size":1060,"mtime":1653950626945,"results":"70","hashOfConfig":"45"},{"size":1251,"mtime":1654220651619,"results":"71","hashOfConfig":"45"},{"size":866,"mtime":1652648685739,"results":"72","hashOfConfig":"45"},{"size":1500,"mtime":1653971543073,"results":"73","hashOfConfig":"45"},{"size":1243,"mtime":1653451475630,"results":"74","hashOfConfig":"45"},{"size":378,"mtime":1652767532166,"results":"75","hashOfConfig":"45"},{"size":2607,"mtime":1652667673596,"results":"76","hashOfConfig":"45"},{"size":213,"mtime":1652767698623,"results":"77","hashOfConfig":"45"},{"size":851,"mtime":1653971834280,"results":"78","hashOfConfig":"45"},{"size":1483,"mtime":1653382517427,"results":"79","hashOfConfig":"45"},{"size":283,"mtime":1653275163278,"results":"80","hashOfConfig":"45"},{"size":1662,"mtime":1652668203715,"results":"81","hashOfConfig":"45"},{"size":6083,"mtime":1653451966074,"results":"82","hashOfConfig":"45"},{"size":344,"mtime":1653020043364,"results":"83","hashOfConfig":"45"},{"size":1347,"mtime":1654221254563,"results":"84","hashOfConfig":"45"},{"size":1405,"mtime":1653183455644,"results":"85","hashOfConfig":"45"},{"size":6017,"mtime":1653972051487,"results":"86","hashOfConfig":"45"},{"size":7485,"mtime":1653383370534,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"mug2r",{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"91"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"91"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"91"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"91"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"91"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"91"},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"91"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"91"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"91"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"91"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"91"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"91"},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"91"},{"filePath":"178","messages":"179","suppressedMessages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"91"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"91"},{"filePath":"198","messages":"199","suppressedMessages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"207","messages":"208","suppressedMessages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"210","messages":"211","suppressedMessages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"213","messages":"214","suppressedMessages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"216","messages":"217","suppressedMessages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"91"},{"filePath":"220","messages":"221","suppressedMessages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"91"},{"filePath":"234","messages":"235","suppressedMessages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"91"},"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/index.js",[],[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/store.js",["238"],[],"import { createStore, configureStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport {\n    productListReducers,\n    productDetailsReducer,\n    productDeleteReducer,\n    productCreateReducer,\n    productUpdateReducer,\n    productReviewCreateReducer,\n    productTopRatedReducer,\n    } from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { \n    userLoginReducer,\n    userRegisterReducer,\n    userDetailsReducer,\n    userUpdateProfileReducer,\n    userListReducer,\n    userDeleteReducer,\n    userUpdateReducer\n     } from './reducers/userReducers'\nimport { \n    orderCreateReducer,\n    orderDetailsReducer,\n    orderPayReducer,\n    orderListMyReducer,\n    orderListReducer,\n    orderDeliverReducer \n    } from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n    productList: productListReducers,\n    productDetails: productDetailsReducer,\n    productDelete: productDeleteReducer,\n    productCreate: productCreateReducer,\n    productUpdate: productUpdateReducer,\n    productReviewCreate: productReviewCreateReducer,\n    productTopRated: productTopRatedReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer,\n    userUpdate: userUpdateReducer,\n    userDelete: userDeleteReducer,\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer,\n    orderListMy: orderListMyReducer,\n    orderList: orderListReducer,\n    orderDeliver: orderDeliverReducer,\n})\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? \n    JSON.parse(localStorage.getItem('userInfo')) : null\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? \n    JSON.parse(localStorage.getItem('shippingAddress')) : {}\n\nconst cartItmesFromStorage = localStorage.getItem('cartItems') ? \n    JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst initialState = {\n    cart:{\n        cartItems: cartItmesFromStorage,\n        shippingAddress: shippingAddressFromStorage\n    },\n    userLogin:{userInfo: userInfoFromStorage},\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, \n    composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reportWebVitals.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/App.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/productReducers.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Header.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/orderReducers.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/HomeScreen.js",["239","240","241","242"],[],"import React, {useState, useEffect} from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Row, Col } from 'react-bootstrap'\nimport products from '../products'\nimport Product from '../components/Product'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport ProductCarousel from '../components/ProductCarousel'\nimport axios from 'axios'\nimport { listProducts } from '../actions/productActions'\nimport { useNavigate, useLocation } from 'react-router-dom'\n\nfunction HomeScreen() {\n  const dispatch = useDispatch()\n  const productList = useSelector(state => state.productList)\n  const {error, loading, products, page, pages} = productList\n\n  let navigate = useNavigate()\n  let location = useLocation()\n  let keyword = location.search\n\n  useEffect(() => {\n    dispatch(listProducts(keyword))\n\n  }, [dispatch, keyword])\n\n  return (\n    <div>\n        {keyword === '' && <ProductCarousel/>}\n        <h1>Latest Products</h1>\n        {loading ? <Loader/>\n            : error ? <Message variant='danger'>{error}</Message>\n            : \n            <div>\n              <Row>\n                {products.map(product => (\n                    <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                        <Product product={product}/>\n                    </Col>\n                ))}\n              </Row>\n              <Paginate page={page} pages={pages} keyword={keyword}/>\n            </div>\n        }\n        \n    </div>\n  )\n}\n\nexport default HomeScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Footer.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/userReducers.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/reducers/cartReducers.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/OrderScreen.js",["243"],["244"],"import React, {useState, useEffect} from 'react'\nimport { useParams, useLocation, useNavigate, Link } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Card, Image } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { PayPalButton } from 'react-paypal-button-v2'\nimport Message from '../components/Message'\nimport Loader from '../components/Loader'\nimport { getOrderDetails, payOrder, deliverOrder } from '../actions/orderActions'\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from '../constants/orderConstants'\n\nfunction OrderScreen() {\n    const params = useParams()\n    const location = useLocation()\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const [sdkReady, setSdkReady] = useState(false)\n\n    const orderDetails = useSelector(state => state.orderDetails)\n    const {order, error, loading} = orderDetails\n    const orderId = params.id\n\n    const orderPay = useSelector(state => state.orderPay)\n    const {loading: loadingPay, success: successPay} = orderPay\n\n    const orderDeliver = useSelector(state => state.orderDeliver)\n    const {loading: loadingDeliver, success: successDeliver} = orderDeliver\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    if(!loading && !error){\n        order.itemsPrice = order.orderItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    }\n    \n    // AfDfCSwyknkISelFENVmSEHx5HM7UHGKIqfrr4hEjcoLmclycDQPRr19uurYOvqRyhqlSRy_1_RalIUT\n\n    const addPayPalScript = () => {\n        const script = document.createElement('script')\n        script.type = 'text/javascript'\n        script.src = 'https://www.paypal.com/sdk/js?client-id=AfDfCSwyknkISelFENVmSEHx5HM7UHGKIqfrr4hEjcoLmclycDQPRr19uurYOvqRyhqlSRy_1_RalIUT'\n        script.async = true\n        script.onload = () => {\n            setSdkReady(true)\n        }\n        document.body.appendChild(script)\n    }\n\n    useEffect(() => {\n        if(!userInfo){\n            navigate('/login/')\n        }\n\n        if(!order || successPay || order._id !== Number(orderId) || successDeliver){\n            console.log('details')\n            dispatch({type:ORDER_PAY_RESET})\n            dispatch({type:ORDER_DELIVER_RESET})\n            \n            dispatch(getOrderDetails(orderId))\n        }else if(!order.isPaid){\n            if(!window.paypal){\n                addPayPalScript()\n            }else{\n                setSdkReady(true)\n            }\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [order, orderId, dispatch, successPay, setSdkReady, successDeliver])\n\n    const successPaymentHandler = (paymentResult) =>{\n        dispatch(payOrder(orderId, paymentResult))\n    }\n\n    const deliverHandler = () => {\n        dispatch(deliverOrder(order))\n    }\n\n\n  return loading ? (\n    <Loader/>\n  ) : error ? (\n      <Message variant='danger'>{error}</Message>\n  ) : (\n    <div>\n        <h1>Order: {order._id}</h1>\n        <Row>\n            <Col md={8}>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        <h2>Shipping</h2>\n                        <p><strong>Name: {order.user.name}</strong></p>\n                        <p><strong>Email: <a href={`mailto:${order.user.email}`}>{order.user.email}</a></strong></p>\n                        <p>\n                            <strong>Shipping:</strong>\n                            {order.shippingAddress.address}, {order.shippingAddress.city}\n                            {' '}\n                            {order.shippingAddress.postalCode},\n                            {' '}\n                            {order.shippingAddress.country}\n                        </p>\n\n                        {order.isDelivered ? (\n                            <Message variant='success'> Delivered on {order.deliveredAt}</Message>\n                        ) : (\n                            <Message variant='warning'> Not Delivered</Message>\n                        )}\n\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Payment Method</h2>\n\n                        <p>\n                            <strong>Method:</strong>\n                            {order.paymentMethod}\n                        </p>\n                        {order.isPaid ? (\n                            <Message variant='success'> Paid on {order.paidAt}</Message>\n                        ) : (\n                            <Message variant='warning'> Not Paid</Message>\n                        )}\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n                            {order.orderItems.length === 0 ? <Message variant='info'>\n                                Order is empty\n                            </Message> : (\n                                <ListGroup variant='flush'>\n                                    {order.orderItems.map((item,index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={2}>\n                                                    <Image src={item.image} alt={item.name} fluid rounded/>\n                                                </Col>\n\n                                                <Col>\n                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                </Col>\n\n                                                <Col md={4}>\n                                                    {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)} \n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        \n                    </ListGroup.Item>\n                </ListGroup>\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Item:</Col>\n                                <Col>${order.itemsPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Shipping:</Col>\n                                <Col>${order.shippingPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Tax:</Col>\n                                <Col>${order.taxPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Total:</Col>\n                                <Col>${order.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                            {!order.isPaid && (\n                                <ListGroup.Item>\n                                    {loadingPay && <Loader/>}\n\n                                    {!sdkReady ? (\n                                        <Loader/>\n                                    ) : (\n                                        <PayPalButton\n                                        amount={order.totalPrice}\n                                        onSuccess={successPaymentHandler}\n                                        />\n                                    )}\n                                </ListGroup.Item>\n                            )}\n                    </ListGroup>\n\n                    {loadingDeliver && <Loader/>}\n\n                    {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                        <ListGroup.Item>\n                            <Button \n                            type='button'\n                            className='btn btn-block'\n                            onClick={deliverHandler}\n                            >\n                                Mark As Delivered\n                            </Button>\n                        </ListGroup.Item>\n                    )}\n\n                </Card>\n            </Col>\n        </Row>\n    </div>\n  )\n}\n\nexport default OrderScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductScreen.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/LoginScreen.js",["245"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { login } from '../actions/userActions'\n\nfunction LoginScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {loading, error, userInfo} = userLogin\n\n    useEffect(() => {\n        if(userInfo){\n            navigate(redirect)\n        }\n    },[userInfo, navigate, redirect])\n\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(login(email, password))\n    }\n\n\n  return (\n        <FormContainer>\n            <h1>Sign In</h1>\n            {error && <Message variant='danger'>{error}</Message>}\n            {loading && <Loader/>}\n            <Form onSubmit={submitHandler}> \n                <Form.Group controlId='email'>\n                    <Form.Label>Email Address </Form.Label>\n                    <Form.Control\n                    type='email'\n                    placeholder='Enter Email'\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Form.Group controlId='password'>\n                    <Form.Label>Password </Form.Label>\n                    <Form.Control\n                    type='password'\n                    placeholder='Enter Password'\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    >\n                    </Form.Control>\n                </Form.Group>\n\n                <Button type='submit' variant='primary'>\n                    Sign In\n                </Button>\n            </Form>\n\n            <Row className='py-3'>\n                <Col>\n                    New Customer? <Link\n                    to={redirect ? `/register?redirect=${redirect}` : '/register'}\n                    >\n                    Register\n                    </Link>\n                </Col>\n            </Row>\n        </FormContainer>\n  )\n}\n\nexport default LoginScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProfileScreen.js",["246","247","248","249"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/userConstants'\nimport { listMyOrders } from '../actions/orderActions'\n\nfunction ProfileScreen() {\n    const params = useParams()\n    const location = useLocation()\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n\n    const userDetails = useSelector(state => state.userDetails)\n    const {loading, error, user} = userDetails\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n    const {success} = userUpdateProfile\n\n    const orderListMy = useSelector(state => state.orderListMy)\n    const {loading: loadingOrders, error: errorOrders, orders } = orderListMy\n\n    useEffect(() => {\n        if(!userInfo){\n            navigate('/login/')\n        }else{\n            if(!user || !user.name || success || userInfo._id !== user._id){\n                dispatch({type: USER_UPDATE_PROFILE_RESET})\n                dispatch(getUserDetails('profile'))\n                dispatch(listMyOrders())\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n            }\n        }\n    },[userInfo, navigate, dispatch, user, success])\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        \n\n        if(password !== confirmPassword){\n            setMessage('Passwords do not match')\n        }else{\n            dispatch(updateUserProfile({\n                'id': user._id,\n                'name': name,\n                'email': email,\n                'password': password,\n            }))\n            setMessage('')\n        }\n    }\n\n\n\n\n  return (\n    <Row>\n        <Col md={3}>\n            <h2>User Profile</h2>\n            {message && <Message variant='danger'>{message}</Message>}\n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                required\n                type='name'\n                placeholder='Enter Name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address </Form.Label>\n                <Form.Control\n                required\n                type='email'\n                placeholder='Enter Email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n                <Form.Label>Password </Form.Label>\n                <Form.Control\n                type='password'\n                placeholder='Enter Password'\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='passwordConfirm'>\n                <Form.Label>Confirm Password </Form.Label>\n                <Form.Control\n                type='password'\n                placeholder='Confirm Password'\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Update\n            </Button>\n        </Form>\n        </Col>\n\n        <Col md={9}>\n            <h2>My Orders</h2>\n            {loadingOrders ? (\n                <Loader/>\n            ) : errorOrders ? (\n                <Message variant='danger'>{errorOrders}</Message>\n            ) : (\n                <Table striped responsive className='table-sm'> \n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Date</th>\n                            <th>Total</th>\n                            <th>Paid</th>\n                            <th>Delivered</th>\n                            <th>ID</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {orders.map(order => (\n                            <tr key={order._id}>\n                                <td>{order._id}</td>\n                                <td>{(order.createdAt).toString().substring(0, 10)}</td>\n                                <td>${order.totalPrice}</td>\n                                <td>{order.isPaid ? order.paidAt.toString().substring(0, 10) : (\n                                    <i className='fas fa-times' style={{color:'red'}}></i>\n                                )}</td>\n                                <td>\n                                    <LinkContainer to={`/order/${order._id}/`}>\n                                        <Button className='btn-sm'>Details</Button>\n                                    </LinkContainer>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n        </Col>\n    </Row>\n  )\n}\n\nexport default ProfileScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/RegisterScreen.js",["250","251"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { register } from '../actions/userActions'\n\n\nfunction RegisterScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [password, setPassword] = useState('')\n    const [confirmPassword, setConfirmPassword] = useState('')\n    const [message, setMessage] = useState('')\n\n    const redirect = location.search ? location.search.split('=')[1] : '/'\n\n    const userRegister = useSelector(state => state.userRegister)\n    const {loading, error, userInfo} = userRegister\n\n    useEffect(() => {\n        if(userInfo){\n            navigate(redirect)\n        }\n    },[userInfo, navigate, redirect])\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        \n\n        if(password !== confirmPassword){\n            setMessage('Passwords do not match')\n        }else{\n            dispatch(register(name, email, password))\n        }\n    }\n\n\n\n  return (\n    <FormContainer>\n        <h1>Sign In</h1>\n        {message && <Message variant='danger'>{message}</Message>}\n        {loading && <Loader/>}\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                required\n                type='name'\n                placeholder='Enter Name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address </Form.Label>\n                <Form.Control\n                required\n                type='email'\n                placeholder='Enter Email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n                <Form.Label>Password </Form.Label>\n                <Form.Control\n                required\n                type='password'\n                placeholder='Enter Password'\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='passwordConfirm'>\n                <Form.Label>Confirm Password </Form.Label>\n                <Form.Control\n                required\n                type='password'\n                placeholder='Confirm Password'\n                value={confirmPassword}\n                onChange={(e) => setConfirmPassword(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Register\n            </Button>\n        </Form>\n\n        <Row className='py-3'>\n            <Col>\n                Have an Account? <Link\n                to={redirect ? `/login?redirect=${redirect}` : '/login'}\n                >\n                Sign In\n                </Link>\n            </Col>\n        </Row>\n    </FormContainer>\n  )\n}\n\nexport default RegisterScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/CartScreen.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/PaymentScreen.js",["252","253","254"],[],"import React, {useState, useEffect} from 'react'\nimport { useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { savePaymentMethod } from '../actions/cartActions'\n\n\nfunction PaymentScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart\n\n    const dispatch = useDispatch()\n\n    const [paymentMethod, setPaymentMethod] = useState('PayPal')\n\n    if(!shippingAddress.address){\n        navigate('/shipping/')\n    }\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(savePaymentMethod(paymentMethod))\n        navigate('/placeorder/')\n    }\n\n\n  return (\n    <FormContainer>\n        <CheckoutSteps step1 step2 step3/>\n\n        <Form onSubmit={submitHandler}>\n            <Form.Group>\n                <Form.Label as='legend'>Select Method</Form.Label>\n                <Col>\n                    <Form.Check\n                       type='radio' \n                       label='Paypal or Credit Card'\n                       id='paypal'\n                       name='paymentMethod'\n                       checked\n                       onChange={(e) => setPaymentMethod(e.target.value)}\n                    >\n\n                    </Form.Check>\n                </Col>\n            </Form.Group>\n            <Button type='submit' variant='primary'>\n                Continue\n            </Button>\n        </Form>\n    </FormContainer>\n  )\n}\n\nexport default PaymentScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/PlaceOrderScreen.js",["255","256","257","258"],["259"],"import React, {useState, useEffect} from 'react'\nimport { useParams, useLocation, useNavigate, Link } from 'react-router-dom'\nimport { Button, Row, Col, ListGroup, Card, Image } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { saveShippingAddress } from '../actions/cartActions'\nimport Message from '../components/Message'\nimport CheckoutSteps from '../components/CheckoutSteps'\nimport { createOrder } from '../actions/orderActions'\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\n\nfunction PlaceOrderScreen() {\n    const params = useParams()\n    const location = useLocation()\n    const navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const orderCreate = useSelector(state => state.orderCreate)\n    const {order, error, success} = orderCreate\n\n    const cart = useSelector(state => state.cart)\n\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\n    cart.taxPrice = ((0.082) * cart.itemsPrice).toFixed(2)\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\n\n    if(!cart.paymentMethod){\n        navigate('/payment/')\n    }\n\n    useEffect(() => {\n        if(success !== undefined){\n            navigate(`/order/${order._id}/`)\n            dispatch({type: ORDER_CREATE_RESET})\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [success, navigate, dispatch])\n\n\n    const placeOrder = () => {\n        dispatch(createOrder({\n            orderItems:cart.cartItems,\n            shippingAddress:cart.shippingAddress,\n            paymentMethod:cart.paymentMethod,\n            itemsPrice:cart.itemsPrice,\n            shippingPrice:cart.shippingPrice,\n            taxPrice:cart.taxPrice,\n            totalPrice:cart.totalPrice,\n        }))\n    }\n\n\n  return (\n    <div>\n        <CheckoutSteps step1 step2 step3 step4/>\n        <Row>\n            <Col md={8}>\n                <ListGroup variant='flush'>\n                    <ListGroup.Item>\n                        <h2>Shipping</h2>\n\n                        <p>\n                            <strong>Shipping:</strong>\n                            {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                            {' '}\n                            {cart.shippingAddress.postalCode},\n                            {' '}\n                            {cart.shippingAddress.country}\n                        </p>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Payment Method</h2>\n\n                        <p>\n                            <strong>Method:</strong>\n                            {cart.paymentMethod}\n                        </p>\n                    </ListGroup.Item>\n\n                    <ListGroup.Item>\n                        <h2>Order Items</h2>\n                            {cart.cartItems.length === 0 ? <Message variant='info'>\n                                Your cart is empty\n                            </Message> : (\n                                <ListGroup variant='flush'>\n                                    {cart.cartItems.map((item,index) => (\n                                        <ListGroup.Item key={index}>\n                                            <Row>\n                                                <Col md={2}>\n                                                    <Image src={item.image} alt={item.name} fluid rounded/>\n                                                </Col>\n\n                                                <Col>\n                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\n                                                </Col>\n\n                                                <Col md={4}>\n                                                    {item.qty} X ${item.price} = ${(item.qty * item.price).toFixed(2)} \n                                                </Col>\n                                            </Row>\n                                        </ListGroup.Item>\n                                    ))}\n                                </ListGroup>\n                            )}\n                        \n                    </ListGroup.Item>\n                </ListGroup>\n            </Col>\n\n            <Col md={4}>\n                <Card>\n                    <ListGroup variant='flush'>\n                        <ListGroup.Item>\n                            <h2>Order Summary</h2>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Item:</Col>\n                                <Col>${cart.itemsPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Shipping:</Col>\n                                <Col>${cart.shippingPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Tax:</Col>\n                                <Col>${cart.taxPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Row>\n                                <Col>Total:</Col>\n                                <Col>${cart.totalPrice}</Col>\n                            </Row>\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            {error && <Message variant='danger'>{error}</Message>}\n                        </ListGroup.Item>\n\n                        <ListGroup.Item>\n                            <Button\n                                type='button'\n                                className='btn-block'\n                                disabled={cart.cartItems === 0}\n                                onClick={placeOrder}\n                            >\n                                Place Order\n                            </Button>\n                        </ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </Col>\n        </Row>\n    </div>\n  )\n}\n\nexport default PlaceOrderScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/UserEditScreen.js",["260","261"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { getUserDetails, updateUser, use } from '../actions/userActions'\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\n\n\nfunction UserEditScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const userId = params.id\n\n    const [name, setName] = useState('')\n    const [email, setEmail] = useState('')\n    const [isAdmin, setIsAdmin] = useState(false)\n\n    const userDetails = useSelector(state => state.userDetails)\n    const {loading, error, user} = userDetails\n\n    const userUpdate = useSelector(state => state.userUpdate)\n    const {loading: loadingUpdate, error: errorUpdate, success: successUpdate} = userUpdate\n\n    useEffect(() => {\n\n        if(successUpdate){\n            dispatch({type:USER_UPDATE_RESET})\n            navigate('/admin/userlist/')\n        }else{\n            if(!user.name || user._id !== Number(userId)){\n                dispatch(getUserDetails(userId))\n            }else{\n                setName(user.name)\n                setEmail(user.email)\n                setIsAdmin(user.isAdmin)\n            }\n        }\n\n        \n    },[user, userId, dispatch, navigate, successUpdate])\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateUser({_id:user._id, name, email, isAdmin}))\n    }\n\n\n\n  return (\n    <div>\n    <Link to='/admin/userlist/'>\n        Go Back\n    </Link>\n    <FormContainer>\n        <h1>Edit User</h1>\n        {loadingUpdate && <Loader/>}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n        {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> \n        : (\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                type='name'\n                placeholder='Enter Name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n                <Form.Label>Email Address </Form.Label>\n                <Form.Control\n                type='email'\n                placeholder='Enter Email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='password'>\n                <Form.Label>Password </Form.Label>\n                <Form.Check\n                type='checkbox'\n                label='Is Admin'\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n                >\n                </Form.Check>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Update\n            </Button>\n        </Form>\n\n        )}\n\n    </FormContainer>\n    </div>\n  )\n}\n\nexport default UserEditScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ShippingScreen.js",["262","263","264"],[],"import React, {useState, useEffect} from 'react'\nimport { useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport FormContainer from '../components/FormContainer'\nimport { saveShippingAddress } from '../actions/cartActions'\nimport CheckoutSteps from '../components/CheckoutSteps'\n\nfunction ShippingScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const cart = useSelector(state => state.cart)\n    const {shippingAddress} = cart\n\n    const [address, setAddress] = useState(shippingAddress.address)\n    const [city, setCity] = useState(shippingAddress.city)\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\n    const [country, setCountry] = useState(shippingAddress.country)\n    \n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        console.log('Submitted')\n        dispatch(saveShippingAddress({address, city, postalCode, country}))\n        navigate('/payment/')\n    }\n\n\n  return (\n    <FormContainer>\n        <CheckoutSteps step1 step2/>\n        <h1>Shipping</h1>\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='address'>\n                <Form.Label>Address</Form.Label>\n                <Form.Control\n                required\n                type='text'\n                placeholder='Enter Address'\n                value={address ? address : ''}\n                onChange={(e) => setAddress(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='city'>\n                <Form.Label>City</Form.Label>\n                <Form.Control\n                required\n                type='text'\n                placeholder='Enter City'\n                value={city ? city : ''}\n                onChange={(e) => setCity(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='postalCode'>\n                <Form.Label>Postal Code</Form.Label>\n                <Form.Control\n                required\n                type='text'\n                placeholder='Enter Postal Code'\n                value={postalCode ? postalCode : ''}\n                onChange={(e) => setPostalCode(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='country'>\n                <Form.Label>Country</Form.Label>\n                <Form.Control\n                required\n                type='text'\n                placeholder='Enter Country'\n                value={country ? country : ''}\n                onChange={(e) => setCountry(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n                Continue\n            </Button>\n        </Form>\n    </FormContainer>\n  )\n}\n\nexport default ShippingScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductEditScreen.js",["265"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { Form, Button } from 'react-bootstrap'\nimport axios from 'axios'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport FormContainer from '../components/FormContainer'\nimport { listProductDetails, updateProduct } from '../actions/productActions'\nimport { PRODUCT_UPDATE_RESET } from '../constants/productConstants'\n\n\nfunction ProductEditScreen() {\n    let params = useParams()\n    let location = useLocation()\n    let navigate = useNavigate()\n    const dispatch = useDispatch()\n\n    const productId = params.id\n\n    const [name, setName] = useState('')\n    const [price, setPrice] = useState(0)\n    const [image, setImage] = useState('')\n    const [brand, setBrand] = useState('')\n    const [category, setCategory] = useState(0)\n    const [countInStock, setCountInStock] = useState('')\n    const [description, setDescription] = useState('')\n    const [uploading, setUploading] = useState(false)\n\n    const productDetails = useSelector(state => state.productDetails)\n    const {product, loading, error } = productDetails\n\n    const productUpdate = useSelector(state => state.productUpdate)\n    const {loading: loadingUpdate, error: errorUpdate, success: successUpdate } = productUpdate\n\n    useEffect(() => {\n\n        if(successUpdate){\n            dispatch({type:PRODUCT_UPDATE_RESET})\n            navigate('/admin/productlist/')\n        }else{\n            if(!product.name || product._id !== Number(productId)){\n                dispatch(listProductDetails(productId))\n            }else{\n                setName(product.name)\n                setPrice(product.price)\n                setImage(product.image)\n                setBrand(product.brand)\n                setCategory(product.category)\n                setCountInStock(product.countInStock)\n                setDescription(product.description)\n            }\n        }\n    },[product, productId, dispatch, navigate, successUpdate])\n\n\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        dispatch(updateProduct({\n            _id: productId,\n            name,\n            price,\n            image,\n            category,\n            brand,\n            countInStock,\n            description\n        }))\n    }\n\n\n    const uploadFileHandler = async (e) => {\n        const file = e.target.files[0]\n        const formData = new FormData()\n\n        formData.append('image', file)\n        formData.append('product_id', productId)\n\n        setUploading(true)\n        try{\n            const config = {\n                headers:{\n                    'Content-Type': 'multipart/form-data'\n                }\n            }\n            \n            const {data} = await axios.post('/api/products/upload/', formData, config)\n            \n            setImage(data)\n            setUploading(false)\n\n        }catch(error){\n            setUploading(false)\n        }\n    }\n\n\n\n  return (\n    <div>\n    <Link to='/admin/productlist/'>\n        Go Back\n    </Link>\n    <FormContainer>\n        <h1>Edit Product</h1>\n        {loadingUpdate && <Loader/>}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n        {loading ? <Loader/> : error ? <Message variant='danger'>{error}</Message> \n        : (\n        <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n                <Form.Label>Name</Form.Label>\n                <Form.Control\n                type='name'\n                placeholder='Enter Name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='price'>\n                <Form.Label>Price</Form.Label>\n                <Form.Control\n                type='number'\n                placeholder='Enter Price'\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='image'>\n                <Form.Label>Image</Form.Label>\n                <Form.Control\n                type='text'\n                placeholder='Enter Image'\n                value={image}\n                onChange={(e) => setImage(e.target.value)}\n                >\n                </Form.Control>\n                <Form.Control\n                    label='Choose-file'\n                    type='file'\n                    custom='true'\n                    onChange={uploadFileHandler}\n                >\n                </Form.Control>\n                {uploading && <Loader/>}\n\n            </Form.Group>\n\n            <Form.Group controlId='brand'>\n                <Form.Label>Brand</Form.Label>\n                <Form.Control\n                type='text'\n                placeholder='Enter Brand'\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='countInStock'>\n                <Form.Label>Stock</Form.Label>\n                <Form.Control\n                type='number'\n                placeholder='Enter Stock'\n                value={countInStock}\n                onChange={(e) => setCountInStock(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='category'>\n                <Form.Label>Category</Form.Label>\n                <Form.Control\n                type='text'\n                placeholder='Enter Category'\n                value={category}\n                onChange={(e) => setCategory(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='description'>\n                <Form.Label>Description</Form.Label>\n                <Form.Control\n                type='text'\n                placeholder='Enter Description'\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                >\n                </Form.Control>\n            </Form.Group>\n\n            \n            <Button type='submit' variant='primary'>\n                Update\n            </Button>\n        </Form>\n\n        )}\n\n    </FormContainer>\n    </div>\n  )\n}\n\nexport default ProductEditScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/UserListScreen.js",["266","267","268","269"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listUsers, deleteUser } from '../actions/userActions'\n\n\nfunction UserListScreen() {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const userList = useSelector(state => state.userList)\n    const {loading, error, users} = userList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    const userDelete = useSelector(state => state.userDelete)\n    const {success: successDelete} = userDelete\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin){\n            dispatch(listUsers())\n        }else{\n            navigate('/login/')\n        }\n    },[dispatch, navigate, successDelete, userInfo])\n    \n\n    const deleteHandler = (id) => {\n        if(window.confirm('Are you sure you want to delete this user?')){\n            dispatch(deleteUser(id))\n        }\n    }\n\n\n\n  return (\n    <div>\n        <h1>Users</h1>\n    { loading\n        ? (<Loader/>)\n        : error\n            ? (<Message variant='danger'>{error}</Message>)\n            : (\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>Name</th>\n                            <th>Email</th>\n                            <th>ADMIN</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {users.map(user => (\n                            <tr key={user._id}>\n                                <td>{user._id}</td>\n                                <td>{user.name}</td>\n                                <td>{user.email}</td>\n                                <td>{user.isAdmin ? (\n                                    <i className='fas fa-check' style={{color:'green'}}></i>\n                                ) : (\n                                    <i className='fas fa-check' style={{color:'red'}}></i>\n                                )}</td>\n                                <td>\n                                    <LinkContainer to={`/admin/user/${user._id}/edit/`}>\n                                        <Button variant='light' className='btm-sm'>\n                                            <i className='fas fa-edit'></i>\n                                        </Button>\n                                    </LinkContainer>\n                                    <Button variant='danger' className='btm-sm' onClick={() => deleteHandler(user._id)}>\n                                        <i className='fas fa-trash'></i>\n                                    </Button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n    </div>\n  )\n}\n\nexport default UserListScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/ProductListScreen.js",["270","271","272"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button, Row, Col } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport Paginate from '../components/Paginate'\nimport { listProducts, deleteProduct, createProduct } from '../actions/productActions'\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\n\n\nfunction ProductListScreen() {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n    const params = useParams()\n    const location = useLocation()\n\n    let keyword = location.search\n\n    const productList = useSelector(state => state.productList)\n    const {loading, error, products, pages, page} = productList\n\n    const productDelete = useSelector(state => state.productDelete)\n    const {loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\n\n    const productCreate = useSelector(state => state.productCreate)\n    const {loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    useEffect(() => {\n        dispatch({type: PRODUCT_CREATE_RESET})\n        if(!userInfo.isAdmin){\n            navigate('/login/')\n        }\n\n        if(successCreate){\n            navigate(`/admin/product/${createdProduct._id}/edit`)\n        }else{\n            dispatch(listProducts(keyword))\n        }\n\n    },[dispatch, navigate, userInfo, successDelete, successCreate, createdProduct, keyword])\n    \n\n    const deleteHandler = (id) => {\n        if(window.confirm('Are you sure you want to delete this product?')){\n            dispatch(deleteProduct(id))\n        }\n    }\n\n\n    const createProductHandler = () => {\n        dispatch(createProduct())\n    }\n\n\n\n  return (\n    <div>\n        <Row className='align-items-center'>\n            <Col>\n                <h1>Products</h1>\n            </Col>\n            <Col className='text-right'>\n                <Button className='my-3' onClick={createProductHandler}>\n                    <i className='fas fa-plus'></i> Create Product\n                </Button>\n            </Col>\n        </Row>\n\n        {loadingDelete && <Loader/>}\n        {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n        {loadingCreate && <Loader/>}\n        {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n    { loading\n        ? (<Loader/>)\n        : error\n            ? (<Message variant='danger'>{error}</Message>)\n            : (\n                <div>\n                    <Table striped bordered hover responsive className='table-sm'>\n                        <thead>\n                            <tr>\n                                <th>ID</th>\n                                <th>Name</th>\n                                <th>Price</th>\n                                <th>Category</th>\n                                <th>Brand</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {products.map(product => (\n                                <tr key={product._id}>\n                                    <td>{product._id}</td>\n                                    <td>{product.name}</td>\n                                    <td>{product.price}</td>\n                                    <td>{product.category}</td>\n                                    <td>{product.brand}</td>\n                                    <td>\n                                        <LinkContainer to={`/admin/product/${product._id}/edit/`}>\n                                            <Button variant='light' className='btm-sm'>\n                                                <i className='fas fa-edit'></i>\n                                            </Button>\n                                        </LinkContainer>\n                                        <Button variant='danger' className='btm-sm' onClick={() => deleteHandler(product._id)}>\n                                            <i className='fas fa-trash'></i>\n                                        </Button>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </Table>\n                    <Paginate pages={pages} page={page} isAdmin={true}/>\n                </div>\n            )}\n    </div>\n  )\n}\n\nexport default ProductListScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/screens/OrderListScreen.js",["273","274","275","276"],[],"import React, {useState, useEffect} from 'react'\nimport { Link, useParams, useLocation, useNavigate } from 'react-router-dom'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport { Table, Button } from 'react-bootstrap'\nimport { useDispatch, useSelector } from 'react-redux'\nimport Loader from '../components/Loader'\nimport Message from '../components/Message'\nimport { listOrders } from '../actions/orderActions'\n\n\nfunction OrderListScreen() {\n    const dispatch = useDispatch()\n    const navigate = useNavigate()\n\n    const orderList = useSelector(state => state.orderList)\n    const {loading, error, orders} = orderList\n\n    const userLogin = useSelector(state => state.userLogin)\n    const {userInfo} = userLogin\n\n    useEffect(() => {\n        if(userInfo && userInfo.isAdmin){\n            dispatch(listOrders())\n        }else{\n            navigate('/login/')\n        }\n    },[dispatch, navigate, userInfo])\n\n\n  return (\n    <div>\n        <h1>Orders</h1>\n    { loading\n        ? (<Loader/>)\n        : error\n            ? (<Message variant='danger'>{error}</Message>)\n            : (\n                <Table striped bordered hover responsive className='table-sm'>\n                    <thead>\n                        <tr>\n                            <th>ID</th>\n                            <th>USER</th>\n                            <th>DATE</th>\n                            <th>TOTAL</th>\n                            <th>PAID</th>\n                            <th>DELIVERED</th>\n                            <th></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {orders.map(order => (\n                            <tr key={order._id}>\n                                <td>{order._id}</td>\n                                <td>{order.user && order.user.name}</td>\n                                <td>{order.createdAt.substring(0,10)}</td>\n                                <td>${order.totalPrice}</td>\n                                <td>{order.isPaid ? (\n                                    order.paidAt.substring(0,10)\n                                ) : (\n                                    <i className='fas fa-check' style={{color:'red'}}></i>\n                                )}</td>\n\n                                <td>{order.isDelivered ? (\n                                    order.deliveredAt.substring(0,10)\n                                ) : (\n                                    <i className='fas fa-check' style={{color:'red'}}></i>\n                                )}</td>\n\n                                <td>\n                                    <LinkContainer to={`/order/${order._id}/`}>\n                                        <Button variant='light' className='btm-sm'>\n                                            Details\n                                        </Button>\n                                    </LinkContainer>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </Table>\n            )}\n    </div>\n  )\n}\n\nexport default OrderListScreen","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/SearchBox.js",["277","278","279"],[],"import React, {useState} from 'react'\nimport {Button, Form, Row, Col} from 'react-bootstrap'\nimport { useNavigate, useLocation } from 'react-router-dom'\n\nfunction SearchBox() {\n    const [keyword, setKeyword] = useState('')\n\n    let navigation = useNavigate()\n    let location = useLocation()\n\n    const submitHandler = (e) => {\n        e.preventDefault()\n        if(keyword){\n            console.log(keyword)\n            navigation(`/?keyword=${keyword}&page=1`)\n        }else if(keyword === ''){\n            console.log('works')\n            navigation(`/`)\n        }\n    }\n\n  return (\n    <Form onSubmit={submitHandler}  style={{display: 'inline-flex'}}>\n        <Form.Control\n            type='text'\n            value={keyword}\n            onChange={(e) => setKeyword(e.target.value)}\n            className='mr-sm-2 m1-sm-5'\n        ></Form.Control>\n        \n        <Button\n            type='submit'\n            variant='outline-success'\n            className='p-2'\n        >\n            Submit\n        </Button>\n    </Form>\n  )\n}\n\nexport default SearchBox","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/ProductCarousel.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Product.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/productConstants.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/orderConstants.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Loader.js",["280"],[],"import React from 'react'\nimport { Spinner, spinner } from 'react-bootstrap'\n\nfunction Loader(){\n  return (\n    <Spinner\n    animation='border'\n    role='status'\n    style={{\n        height: '100px',\n        width: '100px',\n        margin: 'auto',\n        display: 'block'\n    }}>\n    \n    <span className='sr-only'>Loading...</span>\n\n    </Spinner>\n  )\n}\n\nexport default Loader","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/products.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Message.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Paginate.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/userConstants.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/constants/cartConstants.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/Rating.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/orderActions.js",["281","282","283"],[],"import { \n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n    ORDER_PAY_RESET,\n    ORDER_PAY_SUCCESS,\n    ORDER_PAY_FAIL,\n    ORDER_PAY_REQUEST,\n    ORDER_LIST_MY_RESET,\n    ORDER_LIST_MY_SUCCESS,\n    ORDER_LIST_MY_FAIL,\n    ORDER_LIST_MY_REQUEST,\n    ORDER_LIST_SUCCESS,\n    ORDER_LIST_FAIL,\n    ORDER_LIST_REQUEST,\n    ORDER_DELIVER_RESET,\n    ORDER_DELIVER_SUCCESS,\n    ORDER_DELIVER_FAIL,\n    ORDER_DELIVER_REQUEST, \n} from '../constants/orderConstants'\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\nimport axios from 'axios'\n\n\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_CREATE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.post(\n            `/api/orders/add/`,\n            order,\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_CREATE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:CART_CLEAR_ITEMS,\n            payload:data\n        })\n\n        localStorage.removeItem('cartItems')\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:ORDER_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_DETAILS_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders/${id}/`,\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_DETAILS_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:ORDER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_PAY_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/orders/${id}/pay/`,\n            paymentResult,\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_PAY_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:ORDER_PAY_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const deliverOrder = (order) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_DELIVER_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/orders/${order._id}/deliver/`,\n            {},\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_DELIVER_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:ORDER_DELIVER_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const listMyOrders = () => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_LIST_MY_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders/myorders/`,\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_LIST_MY_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:ORDER_LIST_MY_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const listOrders = () => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:ORDER_LIST_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/orders`,\n            config\n            )\n        \n\n        dispatch({\n            type:ORDER_LIST_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:ORDER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/FormContainer.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/cartActions.js",["284"],[],"import axios from 'axios'\nimport { \n    CART_ADD_ITEM,\n    CART_REMOVE_ITEM,\n    CART_SAVE_SHIPPING_ADDRESS,\n    CART_SAVE_PAYMENT_METHOD,\n } from '../constants/cartConstants'\n\n\nexport const addToCart = (id, qty) => async (dispatch, getState) => {\n    const {data} = await axios.get(`/api/products/${id}`)\n    const item = data\n\n    dispatch({\n        type: 'CART_ADD_ITEM',\n        payload: {\n            product:item._id,\n            name:item.name,\n            image:item.image,\n            price:item.price,\n            countInStock: item.countInStock,\n            qty\n        }\n    })\n\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItems))\n\n}\n\n\n\nexport const removeFromCart = (id) => (dispatch, getState) => {\n    \n    dispatch({\n        type: CART_REMOVE_ITEM,\n        payload: id,\n    })\n\n    localStorage.setItem('cartItems', JSON.stringify(getState().cart.cartItem))\n}\n\n\n\nexport const saveShippingAddress = (data) => (dispatch) => {\n    \n    dispatch({\n        type: CART_SAVE_SHIPPING_ADDRESS,\n        payload: data,\n    })\n\n    localStorage.setItem('shippingAddress', JSON.stringify(data))\n}\n\n\nexport const savePaymentMethod = (data) => (dispatch) => {\n    \n    dispatch({\n        type: CART_SAVE_PAYMENT_METHOD,\n        payload: data,\n    })\n\n    localStorage.setItem('paymentMethod', JSON.stringify(data))\n}","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/components/CheckoutSteps.js",[],[],"/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/productActions.js",["285","286","287","288"],[],"import { \n    PRODUCT_LIST_FAIL,\n    PRODUCT_LIST_SUCCESS,\n    PRODUCT_LIST_REQUEST,\n    PRODUCT_DETAILS_FAIL,\n    PRODUCT_DETAILS_SUCCESS,\n    PRODUCT_DETAILS_REQUEST,\n    PRODUCT_DELETE_FAIL,\n    PRODUCT_DELETE_SUCCESS,\n    PRODUCT_DELETE_REQUEST,\n    PRODUCT_CREATE_FAIL,\n    PRODUCT_CREATE_SUCCESS,\n    PRODUCT_CREATE_REQUEST,\n    PRODUCT_CREATE_RESET,\n    PRODUCT_UPDATE_FAIL,\n    PRODUCT_UPDATE_SUCCESS,\n    PRODUCT_UPDATE_REQUEST,\n    PRODUCT_UPDATE_RESET,\n    PRODUCT_CREATE_REVIEW_FAIL,\n    PRODUCT_CREATE_REVIEW_SUCCESS,\n    PRODUCT_CREATE_REVIEW_REQUEST,\n    PRODUCT_CREATE_REVIEW_RESET,\n    PRODUCT_TOP_FAIL,\n    PRODUCT_TOP_SUCCESS,\n    PRODUCT_TOP_REQUEST,\n     } from '../constants/productConstants'\nimport axios from 'axios'\n\n\nexport const listProducts = (keyword = '') => async (dispatch) => {\n    try{\n        dispatch({type: PRODUCT_LIST_REQUEST})\n\n        const {data} = await axios.get(`/api/products${keyword}`)\n\n        dispatch({\n            type:PRODUCT_LIST_SUCCESS,\n            payload: data\n\n        })\n    }catch(error){\n        dispatch({\n            type:PRODUCT_LIST_FAIL,\n            payload:error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const listTopProducts = () => async (dispatch) => {\n    try{\n        dispatch({type: PRODUCT_LIST_REQUEST})\n\n        const {data} = await axios.get(`/api/products/top/`)\n\n        dispatch({\n            type:PRODUCT_TOP_SUCCESS,\n            payload: data\n\n        })\n    }catch(error){\n        dispatch({\n            type:PRODUCT_TOP_FAIL,\n            payload:error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const listProductDetails = (id) => async (dispatch) => {\n    try{\n        dispatch({type: PRODUCT_DETAILS_REQUEST})\n\n        const {data} = await axios.get(`/api/products/${id}`)\n        dispatch({\n            type:PRODUCT_DETAILS_SUCCESS,\n            payload: data\n\n        })\n        \n    }catch(error){\n        dispatch({\n            type:PRODUCT_DETAILS_FAIL,\n            payload:error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\nexport const deleteProduct = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:PRODUCT_DELETE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.delete(\n            `/api/products/delete/${id}/`,\n            config\n            )\n        \n\n        dispatch({\n            type:PRODUCT_DELETE_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:PRODUCT_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const createProduct = () => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:PRODUCT_CREATE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.post(\n            `/api/products/create/`,\n            {},\n            config\n            )\n        \n\n        dispatch({\n            type:PRODUCT_CREATE_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:PRODUCT_CREATE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const updateProduct = (product) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:PRODUCT_UPDATE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/products/update/${product._id}/`,\n            product,\n            config\n            )\n\n        dispatch({\n            type:PRODUCT_UPDATE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type: PRODUCT_DETAILS_SUCCESS,\n             payload: data\n            })\n        \n    }catch(error){\n        dispatch({\n            type:PRODUCT_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const createProductReview = (productId, review) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:PRODUCT_CREATE_REVIEW_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.post(\n            `/api/products/${productId}/reviews/`,\n            review,\n            config\n            )\n\n        dispatch({\n            type:PRODUCT_CREATE_REVIEW_SUCCESS,\n            payload:data\n        })\n        \n    }catch(error){\n        dispatch({\n            type:PRODUCT_CREATE_REVIEW_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}","/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/backend/frontend/src/actions/userActions.js",["289"],[],"import axios from 'axios'\nimport { USER_LOGIN_FAIL,\n    USER_LOGIN_REQUEST,\n    USER_LOGIN_SUCCESS,\n    USER_LOGOUT,\n\n    USER_REGISTER_FAIL,\n    USER_REGISTER_REQUEST,\n    USER_REGISTER_SUCCESS,\n\n    USER_DETAILS_FAIL,\n    USER_DETAILS_REQUEST,\n    USER_DETAILS_SUCCESS,\n    USER_DETAILS_RESET,\n\n    USER_UPDATE_PROFILE_FAIL,\n    USER_UPDATE_PROFILE_REQUEST,\n    USER_UPDATE_PROFILE_SUCCESS,\n    USER_UPDATE_PROFILE_RESET,\n\n    USER_LIST_FAIL,\n    USER_LIST_REQUEST,\n    USER_LIST_SUCCESS,\n    USER_LIST_RESET,\n\n    USER_DELETE_FAIL,\n    USER_DELETE_REQUEST,\n    USER_DELETE_SUCCESS,\n\n    USER_UPDATE_FAIL,\n    USER_UPDATE_REQUEST,\n    USER_UPDATE_SUCCESS,\n    \n } from '../constants/userConstants'\n\n import { ORDER_LIST_MY_RESET } from '../constants/orderConstants'\n\n\nexport const login = (email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type:USER_LOGIN_REQUEST\n        })\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/login/',\n            {'username': email, 'password': password},\n            config\n            )\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_LOGIN_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const logout = () =>  ( dispatch ) =>{\n    localStorage.removeItem('userInfo')\n    dispatch({type: USER_LOGOUT})\n    dispatch({type: USER_DETAILS_RESET})\n    dispatch({type: ORDER_LIST_MY_RESET})\n    dispatch({type: USER_LIST_RESET})\n\n}\n\n\n\nexport const register = (name, email, password) => async (dispatch) => {\n    try{\n        dispatch({\n            type:USER_REGISTER_REQUEST\n        })\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json'\n            }\n        }\n\n        const {data} = await axios.post(\n            '/api/users/register/',\n            {'name': name,'email': email, 'password': password},\n            config\n            )\n\n        dispatch({\n            type:USER_REGISTER_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_REGISTER_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const getUserDetails = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:USER_DETAILS_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/users/${id}/`,\n            config\n            )\n\n        dispatch({\n            type:USER_DETAILS_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_DETAILS_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:USER_UPDATE_PROFILE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/users/profile/update/`,\n            user,\n            config\n            )\n\n        dispatch({\n            type:USER_UPDATE_PROFILE_SUCCESS,\n            payload:data\n        })\n\n        dispatch({\n            type:USER_LOGIN_SUCCESS,\n            payload:data\n        })\n\n        localStorage.setItem('userInfo', JSON.stringify(data))\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_UPDATE_PROFILE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\n\nexport const listUsers = () => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:USER_LIST_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.get(\n            `/api/users/`,\n            config\n            )\n\n        dispatch({\n            type:USER_LIST_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_LIST_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\nexport const deleteUser = (id) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:USER_DELETE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.delete(\n            `/api/users/delete/${id}/`,\n            config\n            )\n\n        dispatch({\n            type:USER_DELETE_SUCCESS,\n            payload:data\n        })\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_DELETE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}\n\n\n\nexport const updateUser = (user) => async (dispatch, getState) => {\n    try{\n        dispatch({\n            type:USER_UPDATE_REQUEST\n        })\n        \n        const { \n            userLogin: {userInfo},\n        } = getState()\n\n        const config = {\n            headers:{\n                'Content-type': 'application/json',\n                Authorization: `Bearer ${userInfo.token}`,\n            }\n        }\n\n        const {data} = await axios.put(\n            `/api/users/update/${user._id}/`,\n            user,\n            config\n            )\n\n        dispatch({\n            type:USER_UPDATE_SUCCESS,\n        })\n\n        dispatch({\n            type:USER_DETAILS_SUCCESS,\n            payload: data\n        })\n\n    }catch(error){\n        console.log(error)\n        dispatch({\n            type:USER_UPDATE_FAIL,\n            payload: error.response && error.response.data.detail\n            ? error.response.data.detail\n            : error.message,\n        })\n    }\n}",{"ruleId":"290","severity":1,"message":"291","line":1,"column":23,"nodeType":"292","messageId":"293","endLine":1,"endColumn":37},{"ruleId":"290","severity":1,"message":"294","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":24},{"ruleId":"290","severity":1,"message":"295","line":4,"column":8,"nodeType":"292","messageId":"293","endLine":4,"endColumn":16},{"ruleId":"290","severity":1,"message":"296","line":10,"column":8,"nodeType":"292","messageId":"293","endLine":10,"endColumn":13},{"ruleId":"290","severity":1,"message":"297","line":19,"column":7,"nodeType":"292","messageId":"293","endLine":19,"endColumn":15},{"ruleId":"290","severity":1,"message":"298","line":13,"column":11,"nodeType":"292","messageId":"293","endLine":13,"endColumn":19},{"ruleId":"299","severity":1,"message":"300","line":68,"column":8,"nodeType":"301","endLine":68,"endColumn":75,"suggestions":"302","suppressions":"303"},{"ruleId":"290","severity":1,"message":"304","line":11,"column":9,"nodeType":"292","messageId":"293","endLine":11,"endColumn":15},{"ruleId":"290","severity":1,"message":"305","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"304","line":13,"column":11,"nodeType":"292","messageId":"293","endLine":13,"endColumn":17},{"ruleId":"290","severity":1,"message":"298","line":14,"column":11,"nodeType":"292","messageId":"293","endLine":14,"endColumn":19},{"ruleId":"290","severity":1,"message":"306","line":27,"column":21,"nodeType":"292","messageId":"293","endLine":27,"endColumn":26},{"ruleId":"290","severity":1,"message":"304","line":12,"column":9,"nodeType":"292","messageId":"293","endLine":12,"endColumn":15},{"ruleId":"290","severity":1,"message":"306","line":26,"column":21,"nodeType":"292","messageId":"293","endLine":26,"endColumn":26},{"ruleId":"290","severity":1,"message":"307","line":1,"column":26,"nodeType":"292","messageId":"293","endLine":1,"endColumn":35},{"ruleId":"290","severity":1,"message":"304","line":11,"column":9,"nodeType":"292","messageId":"293","endLine":11,"endColumn":15},{"ruleId":"290","severity":1,"message":"298","line":12,"column":9,"nodeType":"292","messageId":"293","endLine":12,"endColumn":17},{"ruleId":"290","severity":1,"message":"294","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":24},{"ruleId":"290","severity":1,"message":"308","line":5,"column":10,"nodeType":"292","messageId":"293","endLine":5,"endColumn":29},{"ruleId":"290","severity":1,"message":"304","line":12,"column":11,"nodeType":"292","messageId":"293","endLine":12,"endColumn":17},{"ruleId":"290","severity":1,"message":"298","line":13,"column":11,"nodeType":"292","messageId":"293","endLine":13,"endColumn":19},{"ruleId":"299","severity":1,"message":"309","line":37,"column":8,"nodeType":"301","endLine":37,"endColumn":37,"suggestions":"310","suppressions":"311"},{"ruleId":"290","severity":1,"message":"312","line":8,"column":38,"nodeType":"292","messageId":"293","endLine":8,"endColumn":41},{"ruleId":"290","severity":1,"message":"298","line":14,"column":9,"nodeType":"292","messageId":"293","endLine":14,"endColumn":17},{"ruleId":"290","severity":1,"message":"307","line":1,"column":26,"nodeType":"292","messageId":"293","endLine":1,"endColumn":35},{"ruleId":"290","severity":1,"message":"304","line":10,"column":9,"nodeType":"292","messageId":"293","endLine":10,"endColumn":15},{"ruleId":"290","severity":1,"message":"298","line":11,"column":9,"nodeType":"292","messageId":"293","endLine":11,"endColumn":17},{"ruleId":"290","severity":1,"message":"298","line":15,"column":9,"nodeType":"292","messageId":"293","endLine":15,"endColumn":17},{"ruleId":"290","severity":1,"message":"294","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":24},{"ruleId":"290","severity":1,"message":"305","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"313","line":2,"column":16,"nodeType":"292","messageId":"293","endLine":2,"endColumn":25},{"ruleId":"290","severity":1,"message":"314","line":2,"column":27,"nodeType":"292","messageId":"293","endLine":2,"endColumn":38},{"ruleId":"290","severity":1,"message":"294","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":24},{"ruleId":"290","severity":1,"message":"305","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"304","line":16,"column":11,"nodeType":"292","messageId":"293","endLine":16,"endColumn":17},{"ruleId":"290","severity":1,"message":"294","line":1,"column":16,"nodeType":"292","messageId":"293","endLine":1,"endColumn":24},{"ruleId":"290","severity":1,"message":"305","line":2,"column":10,"nodeType":"292","messageId":"293","endLine":2,"endColumn":14},{"ruleId":"290","severity":1,"message":"313","line":2,"column":16,"nodeType":"292","messageId":"293","endLine":2,"endColumn":25},{"ruleId":"290","severity":1,"message":"314","line":2,"column":27,"nodeType":"292","messageId":"293","endLine":2,"endColumn":38},{"ruleId":"290","severity":1,"message":"315","line":2,"column":23,"nodeType":"292","messageId":"293","endLine":2,"endColumn":26},{"ruleId":"290","severity":1,"message":"316","line":2,"column":28,"nodeType":"292","messageId":"293","endLine":2,"endColumn":31},{"ruleId":"290","severity":1,"message":"298","line":9,"column":9,"nodeType":"292","messageId":"293","endLine":9,"endColumn":17},{"ruleId":"290","severity":1,"message":"317","line":2,"column":19,"nodeType":"292","messageId":"293","endLine":2,"endColumn":26},{"ruleId":"290","severity":1,"message":"318","line":8,"column":5,"nodeType":"292","messageId":"293","endLine":8,"endColumn":20},{"ruleId":"290","severity":1,"message":"319","line":12,"column":5,"nodeType":"292","messageId":"293","endLine":12,"endColumn":24},{"ruleId":"290","severity":1,"message":"320","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":24},{"ruleId":"290","severity":1,"message":"321","line":3,"column":5,"nodeType":"292","messageId":"293","endLine":3,"endColumn":18},{"ruleId":"290","severity":1,"message":"322","line":14,"column":5,"nodeType":"292","messageId":"293","endLine":14,"endColumn":25},{"ruleId":"290","severity":1,"message":"323","line":18,"column":5,"nodeType":"292","messageId":"293","endLine":18,"endColumn":25},{"ruleId":"290","severity":1,"message":"324","line":22,"column":5,"nodeType":"292","messageId":"293","endLine":22,"endColumn":32},{"ruleId":"290","severity":1,"message":"325","line":25,"column":5,"nodeType":"292","messageId":"293","endLine":25,"endColumn":24},{"ruleId":"290","severity":1,"message":"326","line":19,"column":5,"nodeType":"292","messageId":"293","endLine":19,"endColumn":30},"no-unused-vars","'configureStore' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'products' is defined but never used.","'axios' is defined but never used.","'navigate' is assigned a value but never used.","'location' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'userInfo'. Either include them or remove the dependency array.","ArrayExpression",["327"],["328"],"'params' is assigned a value but never used.","'Link' is defined but never used.","'error' is assigned a value but never used.","'useEffect' is defined but never used.","'saveShippingAddress' is defined but never used.","React Hook useEffect has a missing dependency: 'order._id'. Either include it or remove the dependency array.",["329"],["330"],"'use' is defined but never used.","'useParams' is defined but never used.","'useLocation' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'spinner' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","'CART_ADD_ITEM' is defined but never used.","'PRODUCT_CREATE_RESET' is defined but never used.","'PRODUCT_UPDATE_RESET' is defined but never used.","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.","'PRODUCT_TOP_REQUEST' is defined but never used.","'USER_UPDATE_PROFILE_RESET' is defined but never used.",{"desc":"331","fix":"332"},{"kind":"333","justification":"334"},{"desc":"335","fix":"336"},{"kind":"333","justification":"334"},"Update the dependencies array to be: [order, orderId, dispatch, successPay, setSdkReady, successDeliver, userInfo, navigate]",{"range":"337","text":"338"},"directive","","Update the dependencies array to be: [success, navigate, dispatch, order._id]",{"range":"339","text":"340"},[2550,2617],"[order, orderId, dispatch, successPay, setSdkReady, successDeliver, userInfo, navigate]",[1505,1534],"[success, navigate, dispatch, order._id]"]