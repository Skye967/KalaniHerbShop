{"ast":null,"code":"import { createStore, configureStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { productListReducers, productDetailsReducer } from './reducers/productReducers';\nimport { cartReducer } from './reducers/cartReducers';\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers';\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers';\nconst reducer = combineReducers({\n  productList: productListReducers,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userLogin: userLoginReducer,\n  userRegister: userRegisterReducer,\n  userDetails: userDetailsReducer,\n  userUpdateProfile: userUpdateProfileReducer,\n  userList: userListReducer,\n  orderCreate: orderCreateReducer,\n  orderDetails: orderDetailsReducer,\n  orderPay: orderPayReducer,\n  orderListMy: orderListMyReducer\n});\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? JSON.parse(localStorage.getItem('userInfo')) : null;\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? JSON.parse(localStorage.getItem('shippingAddress')) : {};\nconst cartItmesFromStorage = localStorage.getItem('cartItems') ? JSON.parse(localStorage.getItem('cartItems')) : [];\nconst initialState = {\n  cart: {\n    cartItems: cartItmesFromStorage,\n    shippingAddress: shippingAddressFromStorage\n  },\n  userLogin: {\n    userInfo: userInfoFromStorage\n  }\n};\nconst middleware = [thunk];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\nexport default store;","map":{"version":3,"names":["createStore","configureStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","productListReducers","productDetailsReducer","cartReducer","userLoginReducer","userRegisterReducer","userDetailsReducer","userUpdateProfileReducer","userListReducer","orderCreateReducer","orderDetailsReducer","orderPayReducer","orderListMyReducer","reducer","productList","productDetails","cart","userLogin","userRegister","userDetails","userUpdateProfile","userList","orderCreate","orderDetails","orderPay","orderListMy","userInfoFromStorage","localStorage","getItem","JSON","parse","shippingAddressFromStorage","cartItmesFromStorage","initialState","cartItems","shippingAddress","userInfo","middleware","store"],"sources":["/Users/akabigdaddy/Desktop/Users/projects/djangoEcommerce/frontend/src/store.js"],"sourcesContent":["import { createStore, configureStore, combineReducers, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\nimport {productListReducers, productDetailsReducer} from './reducers/productReducers'\nimport { cartReducer } from './reducers/cartReducers'\nimport { userLoginReducer, userRegisterReducer, userDetailsReducer, userUpdateProfileReducer, userListReducer } from './reducers/userReducers'\nimport { orderCreateReducer, orderDetailsReducer, orderPayReducer, orderListMyReducer } from './reducers/orderReducers'\n\nconst reducer = combineReducers({\n    productList: productListReducers,\n    productDetails: productDetailsReducer,\n    cart: cartReducer,\n    userLogin: userLoginReducer,\n    userRegister: userRegisterReducer,\n    userDetails: userDetailsReducer,\n    userUpdateProfile: userUpdateProfileReducer,\n    userList: userListReducer,\n    orderCreate: orderCreateReducer,\n    orderDetails: orderDetailsReducer,\n    orderPay: orderPayReducer,\n    orderListMy: orderListMyReducer,\n})\n\nconst userInfoFromStorage = localStorage.getItem('userInfo') ? \n    JSON.parse(localStorage.getItem('userInfo')) : null\n\nconst shippingAddressFromStorage = localStorage.getItem('shippingAddress') ? \n    JSON.parse(localStorage.getItem('shippingAddress')) : {}\n\nconst cartItmesFromStorage = localStorage.getItem('cartItems') ? \n    JSON.parse(localStorage.getItem('cartItems')) : []\n\nconst initialState = {\n    cart:{\n        cartItems: cartItmesFromStorage,\n        shippingAddress: shippingAddressFromStorage\n    },\n    userLogin:{userInfo: userInfoFromStorage},\n}\n\nconst middleware = [thunk]\n\nconst store = createStore(reducer, initialState, \n    composeWithDevTools(applyMiddleware(...middleware)))\n\nexport default store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,cAAtB,EAAsCC,eAAtC,EAAuDC,eAAvD,QAA8E,OAA9E;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA,SAAQC,mBAAR,EAA6BC,qBAA7B,QAAyD,4BAAzD;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,gBAAT,EAA2BC,mBAA3B,EAAgDC,kBAAhD,EAAoEC,wBAApE,EAA8FC,eAA9F,QAAqH,yBAArH;AACA,SAASC,kBAAT,EAA6BC,mBAA7B,EAAkDC,eAAlD,EAAmEC,kBAAnE,QAA6F,0BAA7F;AAEA,MAAMC,OAAO,GAAGhB,eAAe,CAAC;EAC5BiB,WAAW,EAAEb,mBADe;EAE5Bc,cAAc,EAAEb,qBAFY;EAG5Bc,IAAI,EAAEb,WAHsB;EAI5Bc,SAAS,EAAEb,gBAJiB;EAK5Bc,YAAY,EAAEb,mBALc;EAM5Bc,WAAW,EAAEb,kBANe;EAO5Bc,iBAAiB,EAAEb,wBAPS;EAQ5Bc,QAAQ,EAAEb,eARkB;EAS5Bc,WAAW,EAAEb,kBATe;EAU5Bc,YAAY,EAAEb,mBAVc;EAW5Bc,QAAQ,EAAEb,eAXkB;EAY5Bc,WAAW,EAAEb;AAZe,CAAD,CAA/B;AAeA,MAAMc,mBAAmB,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,IACxBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CADwB,GACuB,IADnD;AAGA,MAAMG,0BAA0B,GAAGJ,YAAY,CAACC,OAAb,CAAqB,iBAArB,IAC/BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,iBAArB,CAAX,CAD+B,GACuB,EAD1D;AAGA,MAAMI,oBAAoB,GAAGL,YAAY,CAACC,OAAb,CAAqB,WAArB,IACzBC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAX,CADyB,GACuB,EADpD;AAGA,MAAMK,YAAY,GAAG;EACjBjB,IAAI,EAAC;IACDkB,SAAS,EAAEF,oBADV;IAEDG,eAAe,EAAEJ;EAFhB,CADY;EAKjBd,SAAS,EAAC;IAACmB,QAAQ,EAAEV;EAAX;AALO,CAArB;AAQA,MAAMW,UAAU,GAAG,CAACtC,KAAD,CAAnB;AAEA,MAAMuC,KAAK,GAAG3C,WAAW,CAACkB,OAAD,EAAUoB,YAAV,EACrBjC,mBAAmB,CAACF,eAAe,CAAC,GAAGuC,UAAJ,CAAhB,CADE,CAAzB;AAGA,eAAeC,KAAf"},"metadata":{},"sourceType":"module"}